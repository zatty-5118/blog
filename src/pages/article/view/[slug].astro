---
import Layout from '../../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import { BASE_URL } from '../../../scripts/modules/baseURL';
import { responseBlog,notionBlog,array__allArticleData } from '../../../scripts/api/notionBlog.js';
import { array__allCategory } from '../../../scripts/array__allCategory.js';
import { NotionToMarkdown } from "notion-to-md";
import { unified } from 'unified';
import { JSDOM } from "jsdom";
import rehypeStringify from 'rehype-stringify';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import remarkUnwrapImages from 'remark-unwrap-images';
import rehypeFigure from "@microflash/rehype-figure";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";
import '../../../styles/articlePage.scss';

export async function getStaticPaths() {
    array__allArticleData.filter((article) => {
        return array__allCategory.filter((value) => {
            if(article.category.includes(value.category)){
                return article["categorySlug"] = value.categorySlug;
            }
        });
    });

    return array__allArticleData.map((elem) => ({
        params: {slug: elem.slug},
        props: {
            response: responseBlog,
            notion: notionBlog,
            id: elem.id,
            title: elem.title,
            thumbnail: elem.thumbnail,
            date: elem.date,
            category_ja: elem.category,
            category_slug: elem.categorySlug,
            published: elem.published,
            description: elem.description
        }
    }))
}

const { slug } = Astro.params;
const { response,notion,id,title,thumbnail,date,category_ja,category_slug,published,description } = Astro.props;

const n2m = new NotionToMarkdown({ notionClient: notion });
const mdblocks = await n2m.pageToMarkdown(id);
const mdString = n2m.toMarkdownString(mdblocks);
const processor = unified();
processor.use(remarkParse, { fragment: true });
processor.use(remarkGfm);
processor.use(remarkUnwrapImages);
processor.use(remarkRehype);
processor.use(rehypeRaw);
processor.use(rehypeFigure);
processor.use(rehypeStringify);

let html = String(await processor.process(mdString.parent));

const dom = new JSDOM(html);
const document = dom.window.document;
const figures = Array.from(document.querySelectorAll("figure"));
let imageGroup = [];
figures.forEach((figure, index) => {
    const prev = figures[index - 1]; // 直前の figure
    const next = figures[index + 1]; // 次の figure

    if (!prev || prev.nextElementSibling !== figure) {
        // 新しい image-group を作成
        imageGroup = [figure];
    } else {
        // 連続する figure を追加
        imageGroup.push(figure);
    }

    if (!next || figure.nextElementSibling !== next) {
        // 連続する figure が終わったら <div> で囲む
        if (imageGroup.length > 1) {
            const div = document.createElement("div");
            div.className = "image-wrapper";
            imageGroup.forEach(fig => div.appendChild(fig.cloneNode(true)));
            imageGroup[0].parentNode.replaceChild(div, imageGroup[0]);

            // すでに div に入れた figure は削除
            imageGroup.slice(1).forEach(fig => fig.remove());
        }
    }
});

const headings = [...document.querySelectorAll("h2")];
if (headings.length > 0) {
    const firstH2 = headings[0];

    const introSection = document.createElement("section");
    introSection.classList.add("introduction");
    let nextElem = document.body.firstChild;

    while (nextElem && nextElem !== firstH2) {
        const moveElem = nextElem;
        nextElem = nextElem.nextSibling;
        introSection.appendChild(moveElem);
    }

    document.body.insertBefore(introSection, firstH2);
}
headings.forEach((h2) => {
    const section = document.createElement("section");
    section.classList.add("topic");
    h2.parentNode.insertBefore(section, h2);
    section.appendChild(h2);

    let nextElem = section.nextSibling;

    while (nextElem && !(nextElem.tagName && nextElem.tagName.toLowerCase() === "h2")) {
        const moveElem = nextElem;
        nextElem = nextElem.nextSibling;
        section.appendChild(moveElem);
    }
});
html = dom.serialize();

html = html.replace(/<table>[\s\S]*?<tbody>([\s\S]*?)<\/tbody>[\s\S]*?<\/table>/g, match => {
    return match
        .replace(/<thead>[\s\S]*?<\/thead>/g, '')
        .replace(/<tr>(.*?)<\/tr>/g, (_, tr) => {
            const cells = tr.match(/<td[^>]*>(.*?)<\/td>/g);
            if (cells && cells.length >= 2) {
                const dt = cells[0].replace(/<\/?td[^>]*>/g, '').trim();
                const dd = cells.slice(1).map(td => td.replace(/<\/?td[^>]*>/g, '').trim()).join(', ');
                return `<dt>${dt}</dt><dd>${dd}</dd>`;
            }
            return '';
        })
        .replace(/<table>|<\/table>|<tbody>|<\/tbody>/g, '')
        .trim();
});
html = html.replace(/(<dt>.*?<\/dt><dd>.*?<\/dd>)/g, '<dl>$1</dl>');
console.log(html)
const hierarchies = [
    {
        position : 2,
        itemName: `${title}`,
        itemPath: `${BASE_URL}/article/view/${slug}`
    },

];

const lists = [
    { 
        name: `${title}`,
        path: `${BASE_URL}/article/view/${slug}`
    },
];
---

<Layout 
    title=`${title} | zatty's Blog`
    description={description}
    url=`${BASE_URL}/article/view/${slug}`
    hierarchies={hierarchies}
    lists={lists}
>
    <main>
        <article>
            <section id="mainView">
                <section class="top">
                    <div class="image">
                        <Image src={thumbnail} alt={title} width={360} height={240}>
                    </div>
                    <div class="title">
                        <h1>{title}</h1>
                    </div>    
                </section>
                <section class="info">
                    <div id={category_slug} class="category">
                        <a href=`${BASE_URL}/article/category/${category_slug}/page=1`>{category_ja}</a>
                    </div>
                    <div class="date">
                        <time datetime={date} itemprop="datePublished">{`${new Date(date).getFullYear()}.${('0'+(new Date(date).getMonth()+1)).slice(-2)}.${('0'+(new Date(date).getDate())).slice(-2)}`}</time>
                    </div>
                </section>
            </section>
            <section id="mainContent" set:html={html}></section>
        </article>
    </main>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js" is:inline></script>
    <script is:inline>
        hljs.initHighlightingOnLoad();
    </script>	
</Layout>